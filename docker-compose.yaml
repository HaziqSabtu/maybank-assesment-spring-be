version: '3.9'

services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    environment:
      SA_PASSWORD: "AAaa0000!"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - ./scripts/init.sql:/init.sql
      - ./scripts/seed.sql:/seed.sql
    working_dir: /
    command: >
      /bin/bash -c "
        /opt/mssql/bin/sqlservr & 
        sleep 20 &&
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'AAaa0000!' -Q 'CREATE DATABASE TESTDB;' -No &&
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'AAaa0000!' -d TESTDB -i /init.sql -No &&
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'AAaa0000!' -d TESTDB -i /seed.sql -No &&
        tail -f /dev/null
      "
    healthcheck:
      test: [ "CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost", "-U", "SA", "-P", "AAaa0000!", "-Q", "SELECT 1", "-b", "-o", "/dev/null", "-No" ]
      interval: 5s
      timeout: 3s
      retries: 10

  check-db-started:
    image: mcr.microsoft.com/mssql-tools
    depends_on:
      - mssql
    entrypoint: /bin/bash
    command: >
      -c "
        for i in {1..30}; do
          /opt/mssql-tools/bin/sqlcmd -S tcp:mssql,1433 -U SA -P 'AAaa0000!' -C -d TESTDB -Q \"
            IF EXISTS (
              SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'users'
            ) 
            BEGIN PRINT 'Table exists' END 
            ELSE BEGIN RAISERROR('Table missing', 16, 1) END
          \" && exit 0;
          echo 'Waiting for users table...';
          sleep 2;
        done;
        echo 'Timed out waiting for users table'; exit 1;
      "

  backend:
    build:
      context: .
      dockerfile: scripts/Dockerfile
    container_name: springboot-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:sqlserver://mssql:1433;databaseName=TESTDB;encrypt=false
      SPRING_DATASOURCE_USERNAME: sa
      SPRING_DATASOURCE_PASSWORD: AAaa0000!
    depends_on:
      check-db-started:
        condition: service_completed_successfully
